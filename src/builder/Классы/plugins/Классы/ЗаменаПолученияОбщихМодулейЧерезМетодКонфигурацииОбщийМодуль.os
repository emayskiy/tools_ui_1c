
// Этот плагин выполняет переименование переменных если это возможно.
// При возникновении конфликтов регистрирует ошибку, которая указывает на конфликтную переменную.

// Пример ожидаемой структуры параметров (json):
// {"СтароеИмя1": "НовоеИмя1", "СтароеИмя2": "НовоеИмя2"}

Перем Типы;
Перем ТаблицаОшибок;
Перем ТаблицаЗамен;
Перем Директивы;

Перем Результат;

Процедура Открыть(Парсер, Параметры) Экспорт
	Типы = Парсер.Типы();
	ТаблицаОшибок = Парсер.ТаблицаОшибок();
	ТаблицаЗамен = Парсер.ТаблицаЗамен();
	Директивы = Парсер.Директивы();
	
	Результат = Новый Массив;
КонецПроцедуры // Открыть()

Функция Закрыть() Экспорт
	Возврат СтрСоединить(Результат);
КонецФункции // Закрыть()

Функция Подписки() Экспорт
	Перем Подписки;
	Подписки = Новый Массив;
	Подписки.Добавить("ПосетитьВыражениеИдентификатор");
	Возврат Подписки;
КонецФункции // Подписки()

#Область РеализацияПодписок

Процедура ПосетитьВыражениеИдентификатор(Описание) Экспорт
	//Заменяем вызов метода "ОбщегоНазначения.ОбщийМодуль()" на ЭтотОбъект;
	
	Если НРег(Описание.Голова.Имя) <> "общегоназначения" Тогда
		Возврат;
	КонецЕсли;
	
	Если Описание.Хвост.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Хвост = Описание.Хвост[0];
	
	Если НРег(Хвост.Имя) <> "общиймодуль" Тогда
		Возврат;
	КонецЕсли;
	
	Если Хвост.Аргументы.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		АргументХвоста = Хвост.Аргументы[0].Элементы[0];
	Исключение
		Возврат;
	КонецПопытки;
	Если Не СтрНачинаетсяС(НРег(АргументХвоста.Значение), "ил_") Тогда
		Возврат;
	КонецЕсли;
	
	Замена("ЭтотОбъект", Описание.Начало, Описание.Конец);
	// Если ОбъявлениеМетода.Сигнатура.Имя <> "ОбщийМодуль" Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Если ОбъявлениеМетода.Операторы.Количество() = 0 Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Вставка("Возврат ЭтотОбъект;" + Символы.ПС, ОбъявлениеМетода.Операторы[0].Начало.Позиция);
КонецПроцедуры

#КонецОбласти // РеализацияПодписок

Процедура Ошибка(Текст, Начало, Конец = Неопределено, ЕстьЗамена = Ложь)
	Ошибка = ТаблицаОшибок.Добавить();
	Ошибка.Источник = "ПереопределитьМетодОбщийМодуль";
	Ошибка.Текст = Текст;
	Ошибка.ПозицияНачала = Начало.Позиция;
	Ошибка.НомерСтрокиНачала = Начало.НомерСтроки;
	Ошибка.НомерКолонкиНачала = Начало.НомерКолонки;
	Если Конец = Неопределено Или Конец = Начало Тогда
		Ошибка.ПозицияКонца = Начало.Позиция + Начало.Длина;
		Ошибка.НомерСтрокиКонца = Начало.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Начало.НомерКолонки + Начало.Длина;
	Иначе
		Ошибка.ПозицияКонца = Конец.Позиция + Конец.Длина;
		Ошибка.НомерСтрокиКонца = Конец.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Конец.НомерКолонки + Конец.Длина;
	КонецЕсли;
	Ошибка.ЕстьЗамена = ЕстьЗамена;
КонецПроцедуры

Процедура Замена(Текст, Начало, Конец = Неопределено)
	НоваяЗамена = ТаблицаЗамен.Добавить();
	НоваяЗамена.Источник = "ПереопределитьМетодОбщийМодуль";
	НоваяЗамена.Текст = Текст;
	НоваяЗамена.Позиция = Начало.Позиция;
	Если Конец = Неопределено Тогда
		НоваяЗамена.Длина = Начало.Длина;
	Иначе
		НоваяЗамена.Длина = Конец.Позиция + Конец.Длина - Начало.Позиция;
	КонецЕсли;
КонецПроцедуры

Процедура Вставка(Текст, Позиция)
	НоваяЗамена = ТаблицаЗамен.Добавить();
	НоваяЗамена.Источник = "ПереопределитьМетодОбщийМодуль";
	НоваяЗамена.Текст = Текст;
	НоваяЗамена.Позиция = Позиция;
	НоваяЗамена.Длина = 0;
КонецПроцедуры